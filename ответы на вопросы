1)В чем основное отличие композиции от агрегации в объектно-ориентированном программировании?
ОТВЕТ=ну кароче в композиции время жизни части Part зависит от целого Whole то есть если Whole удоляется 
то и Part тоже а вот в  агрегации части могут существовать независимо от целого и Whole не управляет временем жизни Part


2)Как реализуется композиция на уровне кода, если класс Whole явно управляет временем жизни объекта Part? Приведите пример
ОТВЕТ=
class Part {
// Детали реализации
};
class Whole {
Part* field1; // Указатель на часть
public:

Whole() { field1 = new Part(); } // Создаём объект Part в
конструкторе
~Whole() { delete field1; }
};



3) Почему агрегация считается более слабым вариантом композиции? В каких случаях её предпочтительно использовать?
ОТВЕТ=Агрегация – это более слабый вариант композиции, при котором время жизни части (Part) и целого (Whole) не связаны. Это означает, что
часть может существовать независимо от целого.Агрегация часто используется, когда один объект является частью
нескольких других объектов или когда один объект передаётся в другойобъект в качестве зависимости.



4) Что такое мощность отношения в контексте композиции и как можно реализовать её с фиксированным и динамическим количеством
элементов?
ОТВЕТ=Мощность отношения – это количество объектов Part, связанных содним объектом Whole.
и вот как можно реализовать её с фиксированным и динамическим количеством элементов=

Пример композиции с фиксированным количеством элементов:
class Part {
// Детали реализации
};
class Whole1 {
Part field1[10]; // Массив из 10 частей
};

Пример композиции с динамическим массивом:
#include &lt;vector&gt;
class Part {
// Детали реализации
};
class Whole2 {
Part* field1; // Указатель на массив
std::vector&lt;Part&gt; field2; // Вектор объектов Part
std::vector&lt;Part*&gt; field3; // Вектор указателей на объекты Part
};



5) Какие бывают виды ассоциации в ООП и чем двунаправленная ассоциация отличается от односторонней?
ОТВЕТ=Ассоциация – это связь между классами где один класс связан с другим но не является его частью а виды ассоциации включают 
одностороннюю где один класс знает о другом и двунаправленную где уже оба класса знают друг о друге
Двунаправленная ассоциация отличается от односторонней тем что оба класса могут взаимодействовать и иметь ссылки друг на друга   




